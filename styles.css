<!doctype html>
<html lang="ru">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>KPI Board</title>
  <link rel="manifest" href="manifest.webmanifest" />
  <meta name="theme-color" content="#f6f7fb" />
  <link rel="stylesheet" href="styles.css" />

  <!-- –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–º—ã –±–µ–∑ –º–∏–≥–∞–Ω–∏—è -->
  <script>
    (function(){
      const key='kpi-theme';
      const saved=localStorage.getItem(key);
      const prefersDark=window.matchMedia('(prefers-color-scheme: dark)').matches;
      const mode=saved||(prefersDark?'dark':'light');
      if(mode==='dark')document.documentElement.classList.add('theme-dark');
    })();
  </script>
</head>
<body>
  <header>
    <h1>KPI Board</h1>
    <div class="header-actions">
      <button id="themeToggle" title="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É">üåó Theme</button>
    </div>
  </header>

  <main>
    <aside id="sidebar"></aside>
    <section id="content" class="section"></section>
  </main>

  <script>
    (function(){
      const key='kpi-theme';
      const btn=document.getElementById('themeToggle');
      if(!btn)return;
      btn.addEventListener('click',()=>{
        const root=document.documentElement;
        const dark=root.classList.toggle('theme-dark');
        localStorage.setItem(key,dark?'dark':'light');
      });
    })();
  </script>

  <!-- ==== Firebase + Auth + Firestore ==== -->
  <script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-app.js";
    import {
      getAuth, onAuthStateChanged, signInWithEmailAndPassword,
      createUserWithEmailAndPassword, signOut
    } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-auth.js";
    import {
      getFirestore, doc, getDoc, setDoc, onSnapshot,
      enableIndexedDbPersistence, serverTimestamp
    } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-firestore.js";

    const firebaseConfig={
      apiKey:"AIzaSyCb92dCbGD4H_YHPGt9SSPukDc7zlk9CpU",
      authDomain:"kpi-board-139b1.firebaseapp.com",
      projectId:"kpi-board-139b1",
      storageBucket:"kpi-board-139b1.firebasestorage.app",
      messagingSenderId:"936203643572",
      appId:"1:936203643572:web:0e2f1b1e1df8b8d3e5b6a1"
    };
    const app=initializeApp(firebaseConfig);
    const auth=getAuth(app);
    const db=getFirestore(app);
    try{await enableIndexedDbPersistence(db);}catch(_){}

    const POSITIONS={
      "Administration":["Director","Team Leader","Driver Evaluator","Capacity Planner","Driver Manager","Driver Administrator"],
      "Accounting":["Team Leader","Manager","Payroll"],
      "Dispatching":["Team Leader","Dispo FTL","Dispo XTL/ODC"]
    };
    const DIRECTOR=["Director"],LEADER=["Team Leader"];
    function roleFromPosition(p){
      if(DIRECTOR.includes(p))return"director";
      if(LEADER.includes(p))return"leader";
      return"member";
    }

    window.__FB_AUTH=auth;
    window.__FB_DB=db;
    window.__fbDoc=doc;
    window.__fbGetDoc=getDoc;
    window.__fbSetDoc=setDoc;
    window.__fbSnap=onSnapshot;
    window.__fbServerTimestamp=serverTimestamp;
    window.__fbLogout=async()=>{try{await signOut(auth);}catch(e){alert("Logout error:"+e.message);}};

    // –ø—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º–∞ –ª–æ–≥–∏–Ω–∞/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    window.showLoginScreen=function(){
      if(document.querySelector('#authBox'))return;
      const box=document.createElement('div');
      box.id='authBox';
      box.style="position:fixed;inset:0;display:flex;align-items:center;justify-content:center;z-index:10000;background:rgba(0,0,0,.5)";
      box.innerHTML=`
        <div style="width:440px;background:var(--surface);border-radius:14px;padding:20px;border:1px solid var(--border);color:var(--text);box-shadow:var(--shadow)">
          <h3>KPI Board ‚Äî Login / Register</h3>
          <div style="display:grid;gap:8px;margin:10px 0">
            <input id="authFirst" type="text" placeholder="First name"/>
            <input id="authLast"  type="text" placeholder="Last name"/>
            <input id="authEmail" type="email" placeholder="Email"/>
            <input id="authPass"  type="password" placeholder="Password"/>
            <select id="authDept">${Object.keys(POSITIONS).map(d=>`<option>${d}</option>`).join("")}</select>
            <select id="authPos"></select>
          </div>
          <div style="display:flex;gap:8px;justify-content:flex-end">
            <button id="btnRegister" class="btn btn-primary">Register</button>
            <button id="btnLogin" class="btn">Login</button>
          </div>
        </div>`;
      document.body.appendChild(box);
      const deptSel=box.querySelector('#authDept');
      const posSel=box.querySelector('#authPos');
      function fill(){posSel.innerHTML=(POSITIONS[deptSel.value]||[]).map(p=>`<option>${p}</option>`).join("");}
      deptSel.addEventListener('change',fill);fill();

      box.querySelector("#btnRegister").onclick=async()=>{
        const f=box.querySelector("#authFirst").value.trim();
        const l=box.querySelector("#authLast").value.trim();
        const e=box.querySelector("#authEmail").value.trim();
        const p=box.querySelector("#authPass").value;
        const d=deptSel.value;
        const pos=posSel.value;
        if(!f||!l||!e||!p)return alert("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è");
        try{
          const cred=await createUserWithEmailAndPassword(auth,e,p);
          const uid=cred.user.uid;
          const name=`${f} ${l}`;
          const role=roleFromPosition(pos);
          await setDoc(doc(db,"users",uid),{displayName:name,email:e,department:d,position:pos,role});
          window.currentUserProfile={displayName:name,email:e,department:d,position:pos,role};
          window.hideLoginScreen&&window.hideLoginScreen();
          window.dispatchEvent(new CustomEvent('fbAuthChanged',{detail:auth.currentUser}));
        }catch(err){alert("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: "+err.message);}
      };

      box.querySelector("#btnLogin").onclick=async()=>{
        const e=box.querySelector("#authEmail").value.trim();
        const p=box.querySelector("#authPass").value;
        try{
          const cred=await signInWithEmailAndPassword(auth,e,p);
          const s=await getDoc(doc(db,"users",cred.user.uid));
          if(s.exists())window.currentUserProfile=s.data();
          window.hideLoginScreen&&window.hideLoginScreen();
          window.dispatchEvent(new CustomEvent('fbAuthChanged',{detail:auth.currentUser}));
        }catch(err){alert("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: "+err.message);}
      };
    };
    window.hideLoginScreen=()=>{const el=document.querySelector("#authBox");if(el)el.remove();};

    async function loadUserProfile(uid){
      try{const s=await getDoc(doc(db,"users",uid));window.currentUserProfile=s.exists()?s.data():null;}
      catch{window.currentUserProfile=null;}
    }
    onAuthStateChanged(auth,async u=>{
      if(u)await loadUserProfile(u.uid);else window.currentUserProfile=null;
      window.dispatchEvent(new CustomEvent('fbAuthChanged',{detail:u||null}));
    });
  </script>

  <script src="app.js"></script>
</body>
</html>
